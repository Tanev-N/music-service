openapi: 3.0.0
info:
  title: Music Service API
  description: API для музыкального сервиса
  version: 1.0.0
servers:
  - url: /api/v1
    description: Основной API сервер
paths:
  /users:
    post:
      summary: Регистрация нового пользователя
      operationId: registerUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "user123"
                password:
                  type: string
                  example: "password123"
              required:
                - login
                - password
            examples:
              register:
                summary: Пример запроса регистрации
                value:
                  login: "user123"
                  password: "password123"
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                login: "user123"
                permission: "user"
                created_at: "2024-01-01T12:00:00Z"
                updated_at: "2024-01-01T12:00:00Z"
        '400':
          description: Некорректные данные запроса
      x-curl-example: |
        curl -X POST "http://localhost:8080/api/v1/users" \
          -H "Content-Type: application/json" \
          -d '{
            "login": "user123",
            "password": "password123"
          }'
  
  /users/auth:
    post:
      summary: Аутентификация пользователя
      operationId: authenticateUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "user123"
                password:
                  type: string
                  example: "password123"
              required:
                - login
                - password
            examples:
              auth:
                summary: Пример запроса авторизации
                value:
                  login: "user123"
                  password: "password123"
      responses:
        '200':
          description: Аутентификация успешна
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    $ref: '#/components/schemas/Session'
              example:
                user:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  login: "user123"
                  permission: "user"
                  created_at: "2024-01-01T12:00:00Z"
                  updated_at: "2024-01-01T12:00:00Z"
                session:
                  id: "987fcdeb-51a2-43f7-9876-543210987654"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expires_at: "2024-01-02T12:00:00Z"
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example:
                  error: "Invalid credentials"
      x-curl-example: |
        curl -X POST "http://localhost:8080/api/v1/users/auth" \
          -H "Content-Type: application/json" \
          -d '{
            "login": "user123",
            "password": "password123"
          }'

  /users/logout:
    post:
      summary: Выход из аккаунта
      operationId: logoutUser
      security:
        - BearerAuth: []
      tags:
        - users
      responses:
        '200':
          description: Успешный выход
        '401':
          description: Не авторизован
        '500':
          description: Ошибка сервера

  /users/{id}:
    get:
      summary: Получить профиль пользователя
      operationId: getUserProfile
      security:
        - BearerAuth: []
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Профиль пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь не найден
        '500':
          description: Ошибка сервера
    
    delete:
      summary: Удалить пользователя
      operationId: deleteUser
      security:
        - BearerAuth: []
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Пользователь успешно удален
        '404':
          description: Пользователь не найден
        '500':
          description: Ошибка сервера

  /users/{id}/permissions:
    patch:
      summary: Обновить разрешения пользователя
      operationId: updateUserPermissions
      security:
        - BearerAuth: []
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permission:
                  type: string
                  enum: [user, admin, moderator]
                  example: "admin"
              required:
                - permission
      responses:
        '200':
          description: Разрешения обновлены
        '400':
          description: Некорректные данные запроса
        '404':
          description: Пользователь не найден
        '500':
          description: Ошибка сервера

  /tracks:
    get:
      summary: Поиск треков
      operationId: searchTracks
      tags:
        - tracks
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            example: "song title"
      responses:
        '200':
          description: Список найденных треков
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  title: "My Song"
                  duration: 180
                  file_path: "/storage/tracks/123.mp3"
                  album_id: "456e7890-12d3-a456-426614174000"
                  artist_name: "Artist Name"
                  cover_url: "https://example.com/covers/123.jpg"
                  added_date: "2024-01-01T12:00:00Z"
                  updated_at: "2024-01-01T12:00:00Z"
                  play_count: 100
                  genres:
                    - id: "789e0123-45f6-789a-bcde-123456789012"
                      name: "Rock"
        '400':
          description: Некорректные параметры запроса
        '500':
          description: Ошибка сервера

    post:
      summary: Загрузить новый трек (только для администраторов)
      operationId: uploadTrack
      security:
        - BearerAuth: []
      tags:
        - tracks
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: MP3 файл трека
                title:
                  type: string
                  example: "Название трека"
                artist_name:
                  type: string
                  example: "Имя исполнителя"
                duration:
                  type: integer
                  description: Длительность трека в секундах
                  example: 180
                album_id:
                  type: string
                  format: uuid
                  description: ID альбома (обязательно)
                  example: "123e4567-e89b-12d3-a456-426614174000"
                cover_url:
                  type: string
                  format: uri
                  description: URL обложки трека (необязательно)
                genre_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: |
                    Массив ID жанров для трека (опционально). Если не передан, трек создаётся без жанров.
              required:
                - file
                - title
                - artist_name
                - album_id
      responses:
        '201':
          description: Трек успешно загружен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Некорректные данные запроса
        '401':
          description: Не авторизован
        '403':
          description: Недостаточно прав (требуются права администратора)
        '500':
          description: Ошибка сервера

  /tracks/{id}:
    get:
      summary: Получить детали трека
      description: Публичный эндпоинт, не требует авторизации
      operationId: getTrackDetails
      tags:
        - tracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Детали трека
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDetails'
        '404':
          description: Трек не найден
        '500':
          description: Ошибка сервера
    
    delete:
      summary: Удалить трек (только для администраторов)
      operationId: deleteTrack
      security:
        - BearerAuth: []
      tags:
        - tracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Трек успешно удален
        '401':
          description: Не авторизован
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Трек не найден
        '500':
          description: Ошибка сервера
    
  /tracks/{id}/stream:
    get:
      summary: Прослушать трек (потоковая передача MP3 файла)
      description: Публичный эндпоинт, не требует авторизации
      operationId: streamTrack
      tags:
        - tracks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Аудиофайл MP3
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary
        '404':
          description: Трек не найден
        '500':
          description: Ошибка сервера

  /albums:
    get:
      summary: Получить список всех альбомов
      description: Публичный эндпоинт, не требует авторизации
      operationId: listAllAlbums
      tags:
        - albums
      responses:
        '200':
          description: Список всех альбомов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '500':
          description: Ошибка сервера
    
    post:
      summary: Создать новый альбом
      operationId: createAlbum
      security:
        - BearerAuth: []
      tags:
        - albums
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "My New Album"
                artist:
                  type: string
                  example: "Artist Name"
                release_date:
                  type: string
                  format: date-time
                cover_url:
                  type: string
                  example: "https://example.com/album-cover.jpg"
              required:
                - title
                - artist
      responses:
        '201':
          description: Альбом успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Некорректные данные запроса
        '403':
          description: Недостаточно прав (требуются права администратора)
        '500':
          description: Ошибка сервера

  /albums/{id}:
    get:
      summary: Получить детали альбома
      description: Публичный эндпоинт, не требует авторизации
      operationId: getAlbumDetails
      tags:
        - albums
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Детали альбома с треками
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumWithTracks'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                title: "Album Title"
                artist: "Artist Name"
                release_date: "2024-01-01T00:00:00Z"
                cover_url: "https://example.com/covers/album123.jpg"
                created_at: "2024-01-01T12:00:00Z"
                updated_at: "2024-01-01T12:00:00Z"
                tracks:
                  - id: "456e7890-12d3-a456-426614174000"
                    title: "Track 1"
                    duration: 180
                    artist_name: "Artist Name"
                    file_path: "/storage/tracks/456.mp3"
                    cover_url: "https://example.com/covers/456.jpg"
                    added_date: "2024-01-01T12:00:00Z"
                    updated_at: "2024-01-01T12:00:00Z"
                    play_count: 50
        '404':
          description: Альбом не найден
        '500':
          description: Ошибка сервера
    
    put:
      summary: Обновить информацию об альбоме
      operationId: updateAlbumInfo
      security:
        - BearerAuth: []
      tags:
        - albums
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Album Title"
                artist:
                  type: string
                  example: "Updated Artist Name"
                release_date:
                  type: string
                  format: date-time
                cover_url:
                  type: string
                  example: "https://example.com/new-cover.jpg"
              required:
                - title
                - artist
      responses:
        '200':
          description: Информация об альбоме обновлена
        '400':
          description: Некорректные данные запроса
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Альбом не найден
        '500':
          description: Ошибка сервера
    
    delete:
      summary: Удалить альбом (вместе со всеми треками)
      operationId: deleteAlbum
      security:
        - BearerAuth: []
      tags:
        - albums
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Альбом и все его треки успешно удалены
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Альбом не найден
        '500':
          description: Ошибка сервера

  /albums/{id}/tracks:
    post:
      summary: Добавить трек в альбом
      operationId: addTrackToAlbum
      security:
        - BearerAuth: []
      tags:
        - albums
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                track_id:
                  type: string
                  format: uuid
              required:
                - track_id
      responses:
        '200':
          description: Трек добавлен в альбом
        '400':
          description: Некорректные данные запроса
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Альбом или трек не найден
        '500':
          description: Ошибка сервера

  /albums/{id}/tracks/{track_id}:
    delete:
      summary: Удалить трек из альбома
      operationId: removeTrackFromAlbum
      security:
        - BearerAuth: []
      tags:
        - albums
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: track_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Трек удален из альбома
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Альбом или трек не найден
        '500':
          description: Ошибка сервера

  /playlists:
    get:
      summary: Получить список плейлистов пользователя
      operationId: getUserPlaylists
      security:
        - BearerAuth: []
      tags:
        - playlists
      responses:
        '200':
          description: Список плейлистов пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Playlist'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  user_id: "456e7890-12d3-a456-426614174000"
                  name: "My Favorite Songs"
                  description: "Collection of my favorite tracks"
                  created_at: "2024-01-01T12:00:00Z"
                - ID: "789e0123-45f6-789a-bcde-123456789012"
                  UserID: "456e7890-12d3-a456-426614174000"
                  Name: "Rock Playlist"
                  Description: "Best rock songs"
                  CreatedAt: "2024-01-02T12:00:00Z"

  /playlists/{id}:
    get:
      summary: Получить плейлист с треками
      operationId: getPlaylistWithTracks
      security:
        - BearerAuth: []
      tags:
        - playlists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Плейлист с треками
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistTrack'
              example:
                playlist:
                  ID: "123e4567-e89b-12d3-a456-426614174000"
                  Name: "My Playlist"
                  Description: "My favorite tracks"
                  UserID: "456e7890-12d3-a456-426614174000"
                  CreatedAt: "2024-01-01T12:00:00Z"
                tracks:
                  - ID: "789e0123-45f6-789a-bcde-123456789012"
                    Title: "Track Title"
                    Duration: 180
                    ArtistName: "Artist Name"
                    AlbumTitle: "Album Name"
                    CoverUrl: "https://example.com/covers/789.jpg"
                    PlayCount: 50

  /playlists/{id}:
    put:
      summary: Обновить информацию о плейлисте
      operationId: editPlaylistInfo
      security:
        - BearerAuth: []
      tags:
        - playlists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Updated Playlist Name"
                description:
                  type: string
                  example: "Updated description for the playlist"
              required:
                - name
      responses:
        '200':
          description: Информация о плейлисте обновлена
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа к редактированию плейлиста
        '404':
          description: Плейлист не найден
        '500':
          description: Ошибка сервера
          
    delete:
      summary: Удалить плейлист
      operationId: deletePlaylist
      security:
        - BearerAuth: []
      tags:
        - playlists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Плейлист успешно удален
        '401':
          description: Не авторизован
        '403':
          description: Нет доступа к удалению плейлиста
        '404':
          description: Плейлист не найден
        '500':
          description: Ошибка сервера

  /playlists/{id}/tracks:
    get:
      summary: Получить треки из плейлиста
      operationId: getPlaylistTracks
      security:
        - BearerAuth: []
      tags:
        - playlists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список треков в плейлисте
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '404':
          description: Плейлист не найден
        '500':
          description: Ошибка сервера
    
    post:
      summary: Добавить трек в плейлист
      operationId: addTrackToPlaylist
      security:
        - BearerAuth: []
      tags:
        - playlists
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                track_id:
                  type: string
                  format: uuid
              required:
                - track_id
      responses:
        '200':
          description: Трек добавлен в плейлист
        '404':
          description: Плейлист или трек не найден
        '500':
          description: Ошибка сервера

  /playlists/{playlistId}/tracks/{trackId}:
    delete:
      summary: Удалить трек из плейлиста
      operationId: removeTrackFromPlaylist
      security:
        - BearerAuth: []
      tags:
        - playlists
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Трек удален из плейлиста
        '404':
          description: Плейлист или трек не найден
        '500':
          description: Ошибка сервера

  /genres:
    get:
      summary: Получить список всех жанров
      operationId: listAllGenres
      tags:
        - genres
      responses:
        '200':
          description: Список жанров
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Rock"
                - ID: "456e7890-12d3-a456-426614174000"
                  Name: "Jazz"

  /genres/tracks/{id}:
    get:
      summary: Получить жанры для трека
      description: Публичный эндпоинт, не требует авторизации
      operationId: getGenresByTrack
      tags:
        - genres
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список жанров для трека
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  name: "Rock"
                - ID: "456e7890-12d3-a456-426614174000"
                  Name: "Alternative"

  /genres/tracks/{id}/genres:
    post:
      summary: Назначить жанр треку
      operationId: assignGenreToTrack
      security:
        - BearerAuth: []
      tags:
        - genres
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                genre_id:
                  type: string
                  format: uuid
              required:
                - genre_id
      responses:
        '200':
          description: Жанр назначен треку
        '400':
          description: Некорректные данные запроса
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Трек или жанр не найден
        '500':
          description: Ошибка сервера

  /genres/tracks/{trackId}/genres/{genreId}:
    delete:
      summary: Удалить жанр у трека
      operationId: removeGenreFromTrack
      security:
        - BearerAuth: []
      tags:
        - genres
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: genreId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Жанр удален у трека
        '403':
          description: Недостаточно прав (требуются права администратора)
        '404':
          description: Трек или жанр не найден
        '500':
          description: Ошибка сервера

  /history:
    get:
      summary: Получить историю прослушиваний пользователя
      operationId: getUserHistory
      security:
        - BearerAuth: []
      tags:
        - history
      responses:
        '200':
          description: История прослушиваний пользователя
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListeningHistory'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  user_id: "456e7890-12d3-a456-426614174000"
                  track_id: "789e0123-45f6-789a-bcde-123456789012"
                  listened_at: "2024-01-01T12:00:00Z"
                  track:
                    id: "789e0123-45f6-789a-bcde-123456789012"
                    title: "Track Title"
                    artist_name: "Artist Name"
                    duration: 180
                    album_title: "Album Title"
                    cover_url: "https://example.com/covers/123.jpg"
        '401':
          description: Не авторизован
        '500':
          description: Ошибка сервера

  /history/recent:
    get:
      summary: Получить недавние прослушивания
      operationId: getRecentPlays
      security:
        - BearerAuth: []
      tags:
        - history
      parameters:
        - name: hours
          in: query
          description: Количество часов, за которые нужно получить историю (по умолчанию 24)
          schema:
            type: integer
            default: 24
            example: 24
      responses:
        '200':
          description: Недавние прослушивания
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListeningHistory'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  user_id: "456e7890-12d3-a456-426614174000"
                  track_id: "789e0123-45f6-789a-bcde-123456789012"
                  listened_at: "2024-01-01T12:00:00Z"
                  track:
                    ID: "789e0123-45f6-789a-bcde-123456789012"
                    Title: "Track Title"
                    ArtistName: "Artist Name"
                    Duration: 180
                    AlbumTitle: "Album Title"
                    CoverUrl: "https://example.com/covers/789.jpg"
                    PlayCount: 50

  /history/tracks/{trackId}:
    post:
      summary: Записать прослушивание трека
      operationId: recordPlayback
      security:
        - BearerAuth: []
      tags:
        - history
      parameters:
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Прослушивание записано
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Прослушивание успешно записано"
        '400':
          description: Некорректный ID трека
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid track ID"
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Трек не найден
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Track not found"
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
        permission:
          type: string
          enum: [user, admin, moderator]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - login
        - permission
        - created_at
        - updated_at
    
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        expires_at:
          type: string
          format: date-time
      required:
        - id
        - token
        - expires_at
    
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        ID:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "My Song"
        Title:
          type: string
          example: "My Song"
        duration:
          type: integer
          description: Продолжительность трека в секундах
          example: 180
        Duration:
          type: integer
          description: Продолжительность трека в секундах
          example: 180
        file_path:
          type: string
          description: Относительный путь к MP3 файлу
          example: "/storage/tracks/123.mp3"
        FilePath:
          type: string
          description: Относительный путь к MP3 файлу
          example: "/storage/tracks/123.mp3"
        album_id:
          type: string
          format: uuid
          description: ID альбома, к которому принадлежит трек
          example: "456e7890-12d3-a456-426614174000"
        AlbumID:
          type: string
          format: uuid
          description: ID альбома, к которому принадлежит трек
          example: "456e7890-12d3-a456-426614174000"
        album_title:
          type: string
          description: Название альбома
          example: "Album Name"
        AlbumTitle:
          type: string
          description: Название альбома
          example: "Album Name"
        artist_name:
          type: string
          example: "Artist Name"
        ArtistName:
          type: string
          example: "Artist Name"
        cover_url:
          type: string
          description: URL обложки трека
          example: "https://example.com/covers/123.jpg"
        CoverUrl:
          type: string
          description: URL обложки трека
          example: "https://example.com/covers/123.jpg"
        play_count:
          type: integer
          description: Количество прослушиваний
          example: 100
        PlayCount:
          type: integer
          description: Количество прослушиваний
          example: 100
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
          description: Список жанров трека
      required:
        - id
        - title
        - duration
        - file_path
        - artist_name
        - added_date
        - updated_at
    
    TrackDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artist_name:
          type: string
        duration:
          type: integer
          description: Продолжительность трека в секундах
        file_path:
          type: string
        mime_type:
          type: string
        cover_url:
          type: string
        added_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        play_count:
          type: integer
        album:
          $ref: '#/components/schemas/Album'
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
      required:
        - id
        - title
        - artist_name
        - duration
        - file_path
        - mime_type
    
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artist:
          type: string
        release_date:
          type: string
          format: date-time
        cover_url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - title
        - artist
        - release_date
    
    AlbumWithTracks:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        artist:
          type: string
        release_date:
          type: string
          format: date-time
        cover_url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - id
        - title
        - artist
        - release_date
        - tracks
    
    Playlist:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        ID:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        user_id:
          type: string
          format: uuid
          example: "456e7890-12d3-a456-426614174000"
        UserID:
          type: string
          format: uuid
          example: "456e7890-12d3-a456-426614174000"
        name:
          type: string
          example: "My Playlist"
        Name:
          type: string
          example: "My Playlist"
        description:
          type: string
          example: "My favorite tracks"
        Description:
          type: string
          example: "My favorite tracks"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
        CreatedAt:
          type: string
          format: date-time
          example: "2024-01-01T12:00:00Z"
      required:
        - id
        - user_id
        - name
        - created_at
    
    PlaylistTrack:
      type: object
      properties:
        playlist:
          $ref: '#/components/schemas/Playlist'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - playlist
        - tracks

    Genre:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        ID:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Rock"
        Name:
          type: string
          example: "Rock"
      required:
        - id
        - name
    
    ListeningHistory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        track_id:
          type: string
          format: uuid
        listened_at:
          type: string
          format: date-time
        track:
          $ref: '#/components/schemas/Track'
      required:
        - id
        - user_id
        - track_id
        - listened_at
        - track

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT токен авторизации. Передается в заголовке Authorization.
        
        Пример использования:
        ```
        curl -X GET "http://localhost:8080/api/v1/playlists" \
          -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        ```
        
        Для тестирования можно использовать токен админа:
        ```
        curl -X GET "http://localhost:8080/api/v1/playlists" \
          -H "Authorization: Bearer 33333333-3333-3333-3333-333333333333"
        ``` 