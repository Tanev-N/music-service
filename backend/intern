// Code generated by MockGen. DO NOT EDIT.
// Source: src/src/internal/repository/interfaces/album_repository.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	models "music-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAlbumRepository is a mock of AlbumRepository interface.
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository.
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance.
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// AddTrackToAlbum mocks base method.
func (m *MockAlbumRepository) AddTrackToAlbum(albumID, trackID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrackToAlbum", albumID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrackToAlbum indicates an expected call of AddTrackToAlbum.
func (mr *MockAlbumRepositoryMockRecorder) AddTrackToAlbum(albumID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrackToAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).AddTrackToAlbum), albumID, trackID)
}

// Delete mocks base method.
func (m *MockAlbumRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAlbumRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAlbumRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockAlbumRepository) FindByID(id uuid.UUID) (*models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAlbumRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAlbumRepository)(nil).FindByID), id)
}

// GetTracks mocks base method.
func (m *MockAlbumRepository) GetTracks(albumID uuid.UUID) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracks", albumID)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracks indicates an expected call of GetTracks.
func (mr *MockAlbumRepositoryMockRecorder) GetTracks(albumID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracks", reflect.TypeOf((*MockAlbumRepository)(nil).GetTracks), albumID)
}

// ListAll mocks base method.
func (m *MockAlbumRepository) ListAll() ([]*models.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]*models.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockAlbumRepositoryMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAlbumRepository)(nil).ListAll))
}

// RemoveTrackFromAlbum mocks base method.
func (m *MockAlbumRepository) RemoveTrackFromAlbum(albumID, trackID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrackFromAlbum", albumID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrackFromAlbum indicates an expected call of RemoveTrackFromAlbum.
func (mr *MockAlbumRepositoryMockRecorder) RemoveTrackFromAlbum(albumID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrackFromAlbum", reflect.TypeOf((*MockAlbumRepository)(nil).RemoveTrackFromAlbum), albumID, trackID)
}

// Save mocks base method.
func (m *MockAlbumRepository) Save(album *models.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", album)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAlbumRepositoryMockRecorder) Save(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAlbumRepository)(nil).Save), album)
}
