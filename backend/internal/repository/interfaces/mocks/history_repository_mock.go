// Code generated by MockGen. DO NOT EDIT.
// Source: src/src/internal/repository/interfaces/history_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "music-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockHistoryRepository is a mock of HistoryRepository interface.
type MockHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepositoryMockRecorder
}

// MockHistoryRepositoryMockRecorder is the mock recorder for MockHistoryRepository.
type MockHistoryRepositoryMockRecorder struct {
	mock *MockHistoryRepository
}

// NewMockHistoryRepository creates a new mock instance.
func NewMockHistoryRepository(ctrl *gomock.Controller) *MockHistoryRepository {
	mock := &MockHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepository) EXPECT() *MockHistoryRepositoryMockRecorder {
	return m.recorder
}

// AddEntry mocks base method.
func (m *MockHistoryRepository) AddEntry(userID, trackID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntry", userID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntry indicates an expected call of AddEntry.
func (mr *MockHistoryRepositoryMockRecorder) AddEntry(userID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntry", reflect.TypeOf((*MockHistoryRepository)(nil).AddEntry), userID, trackID)
}

// GetHistory mocks base method.
func (m *MockHistoryRepository) GetHistory(userID uuid.UUID) ([]*models.ListeningHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", userID)
	ret0, _ := ret[0].([]*models.ListeningHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockHistoryRepositoryMockRecorder) GetHistory(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockHistoryRepository)(nil).GetHistory), userID)
}
