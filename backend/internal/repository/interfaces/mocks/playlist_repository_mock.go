// Code generated by MockGen. DO NOT EDIT.
// Source: src/src/internal/repository/interfaces/playlist_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "music-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPlaylistRepository is a mock of PlaylistRepository interface.
type MockPlaylistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlaylistRepositoryMockRecorder
}

// MockPlaylistRepositoryMockRecorder is the mock recorder for MockPlaylistRepository.
type MockPlaylistRepositoryMockRecorder struct {
	mock *MockPlaylistRepository
}

// NewMockPlaylistRepository creates a new mock instance.
func NewMockPlaylistRepository(ctrl *gomock.Controller) *MockPlaylistRepository {
	mock := &MockPlaylistRepository{ctrl: ctrl}
	mock.recorder = &MockPlaylistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaylistRepository) EXPECT() *MockPlaylistRepositoryMockRecorder {
	return m.recorder
}

// AddTrack mocks base method.
func (m *MockPlaylistRepository) AddTrack(playlistID, trackID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrack", playlistID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTrack indicates an expected call of AddTrack.
func (mr *MockPlaylistRepositoryMockRecorder) AddTrack(playlistID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrack", reflect.TypeOf((*MockPlaylistRepository)(nil).AddTrack), playlistID, trackID)
}

// Delete mocks base method.
func (m *MockPlaylistRepository) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaylistRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaylistRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockPlaylistRepository) FindByID(id uuid.UUID) (*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPlaylistRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPlaylistRepository)(nil).FindByID), id)
}

// GetTracks mocks base method.
func (m *MockPlaylistRepository) GetTracks(playlistID uuid.UUID) ([]*models.Track, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracks", playlistID)
	ret0, _ := ret[0].([]*models.Track)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracks indicates an expected call of GetTracks.
func (mr *MockPlaylistRepositoryMockRecorder) GetTracks(playlistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracks", reflect.TypeOf((*MockPlaylistRepository)(nil).GetTracks), playlistID)
}

// GetUserPlaylists mocks base method.
func (m *MockPlaylistRepository) GetUserPlaylists(userID uuid.UUID) ([]*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPlaylists", userID)
	ret0, _ := ret[0].([]*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPlaylists indicates an expected call of GetUserPlaylists.
func (mr *MockPlaylistRepositoryMockRecorder) GetUserPlaylists(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPlaylists", reflect.TypeOf((*MockPlaylistRepository)(nil).GetUserPlaylists), userID)
}

// RemoveTrack mocks base method.
func (m *MockPlaylistRepository) RemoveTrack(playlistID, trackID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrack", playlistID, trackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTrack indicates an expected call of RemoveTrack.
func (mr *MockPlaylistRepositoryMockRecorder) RemoveTrack(playlistID, trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrack", reflect.TypeOf((*MockPlaylistRepository)(nil).RemoveTrack), playlistID, trackID)
}

// Save mocks base method.
func (m *MockPlaylistRepository) Save(playlist *models.Playlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", playlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPlaylistRepositoryMockRecorder) Save(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlaylistRepository)(nil).Save), playlist)
}
